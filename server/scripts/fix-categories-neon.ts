import { Pool, neonConfig } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-serverless';
import { eq, inArray } from 'drizzle-orm';
import ws from "ws";
import * as schema from '@shared/schema';
import { config } from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
config({ override: true }); // override: true –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

async function fixCategoriesNeon() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
    if (!process.env.DATABASE_URL) {
      console.error('‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      console.log('üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon');
      return;
    }

    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    console.log('üåê URL:', process.env.DATABASE_URL.replace(/:[^:@]*@/, ':***@')); // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon
    neonConfig.webSocketConstructor = ws;
    const pool = new Pool({ connectionString: process.env.DATABASE_URL });
    const db = drizzle({ client: pool, schema });

    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ Neon...');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
    const petTypes = ['Dog', 'Cat', 'Bird', 'Rabbit', 'Hamster', 'Fish'];
    
    console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö...');
    const petsResult = await db
      .update(schema.animalTypes)
      .set({ category: 'pets' })
      .where(inArray(schema.animalTypes.name, petTypes));
    
    console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–∏–ø–æ–≤ –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö: ${petsResult.rowCount || 0}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã —Å–∫–æ—Ç–∞
    const livestockTypes = ['Cattle', 'Sheep', 'Goats', 'Horses', 'Pigs', 'Poultry'];
    
    console.log('üêÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø—ã —Å–∫–æ—Ç–∞...');
    const livestockResult = await db
      .update(schema.animalTypes)
      .set({ category: 'livestock' })
      .where(inArray(schema.animalTypes.name, livestockTypes));
    
    console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–∏–ø–æ–≤ —Å–∫–æ—Ç–∞: ${livestockResult.rowCount || 0}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    const allTypes = await db.select().from(schema.animalTypes);
    
    const pets = allTypes.filter(type => type.category === 'pets');
    const livestock = allTypes.filter(type => type.category === 'livestock');
    const uncategorized = allTypes.filter(type => !type.category || (type.category !== 'pets' && type.category !== 'livestock'));
    
    console.log('\nüéâ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Neon –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
    console.log('üìä –ò—Ç–æ–≥–æ:');
    console.log(`   üêæ –î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ: ${pets.length}`);
    pets.forEach(pet => console.log(`      - ${pet.name} (${pet.nameRu})`));
    
    console.log(`   üêÑ –°–∫–æ—Ç: ${livestock.length}`);
    livestock.forEach(animal => console.log(`      - ${animal.name} (${animal.nameRu})`));
    
    if (uncategorized.length > 0) {
      console.log(`   ‚ùì –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${uncategorized.length}`);
      uncategorized.forEach(animal => console.log(`      - ${animal.name} (${animal.nameRu})`));
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await pool.end();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ Neon:', error);
    
    const errorMessage = error instanceof Error ? error.message : String(error);
    if (errorMessage.includes('ECONNREFUSED')) {
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL');
    } else if (errorMessage.includes('authentication')) {
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ DATABASE_URL');
    } else if (errorMessage.includes('database') && errorMessage.includes('does not exist')) {
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    }
    
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫
fixCategoriesNeon(); 