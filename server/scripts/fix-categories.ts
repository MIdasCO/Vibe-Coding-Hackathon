import { drizzle } from 'drizzle-orm/neon-http';
import { neon } from '@neondatabase/serverless';
import { animalTypes, animals } from '../../shared/schema';
import { eq, inArray } from 'drizzle-orm';

// Database setup
if (!process.env.DATABASE_URL) {
  console.error('DATABASE_URL is required');
  process.exit(1);
}

const sql = neon(process.env.DATABASE_URL);
const db = drizzle(sql);

async function fixCategories() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö...');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
    console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö...');
    const petTypes = await db
      .update(animalTypes)
      .set({ category: 'pets' })
      .where(inArray(animalTypes.name, ['Dog', 'Cat', 'Bird', 'Rabbit', 'Hamster', 'Fish']))
      .returning();
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${petTypes.length} —Ç–∏–ø–æ–≤ –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø—ã —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
    console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø—ã —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö...');
    const livestockTypes = await db
      .update(animalTypes)
      .set({ category: 'livestock' })
      .where(inArray(animalTypes.name, ['Cattle', 'Sheep', 'Goats', 'Horses', 'Pigs', 'Poultry']))
      .returning();
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${livestockTypes.length} —Ç–∏–ø–æ–≤ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö`);

    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–ø–æ–≤ –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
    const petTypeIds = await db
      .select({ id: animalTypes.id })
      .from(animalTypes)
      .where(eq(animalTypes.category, 'pets'));

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö —Ç–∏–ø–æ–≤
    if (petTypeIds.length > 0) {
      console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö (–¥–æ–º–∞—à–Ω–∏–µ)...');
      const updatedPets = await db
        .update(animals)
        .set({ category: 'pets' })
        .where(inArray(animals.animalTypeId, petTypeIds.map(t => t.id)))
        .returning({ id: animals.id });
      
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedPets.length} –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö`);
    }

    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–ø–æ–≤ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
    const livestockTypeIds = await db
      .select({ id: animalTypes.id })
      .from(animalTypes)
      .where(eq(animalTypes.category, 'livestock'));

    if (livestockTypeIds.length > 0) {
      console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö (—Å–∫–æ—Ç)...');
      const updatedLivestock = await db
        .update(animals)
        .set({ category: 'livestock' })
        .where(inArray(animals.animalTypeId, livestockTypeIds.map(t => t.id)))
        .returning({ id: animals.id });
      
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedLivestock.length} —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    const result = await db
      .select({
        name: animalTypes.name,
        category: animalTypes.category,
      })
      .from(animalTypes)
      .orderBy(animalTypes.category, animalTypes.name);

    console.log('\nüìã –¢–∏–ø—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
    let currentCategory = '';
    for (const type of result) {
      if (type.category !== currentCategory) {
        currentCategory = type.category || 'undefined';
        console.log(`\nüè∑Ô∏è ${currentCategory.toUpperCase()}:`);
      }
      console.log(`  - ${type.name}`);
    }

    console.log('\n‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    process.exit(1);
  }
}

fixCategories(); 