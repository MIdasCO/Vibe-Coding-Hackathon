import { Pool, neonConfig } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-serverless';
import { sql } from 'drizzle-orm';
import ws from "ws";
import * as schema from '@shared/schema';
import { config } from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
config({ override: true });

async function addCategoryFieldNeon() {
  try {
    if (!process.env.DATABASE_URL) {
      console.error('‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      return;
    }

    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    console.log('üåê URL:', process.env.DATABASE_URL.replace(/:[^:@]*@/, ':***@'));
    
    neonConfig.webSocketConstructor = ws;
    const pool = new Pool({ connectionString: process.env.DATABASE_URL });
    const db = drizzle({ client: pool, schema });

    console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ category –≤ —Ç–∞–±–ª–∏—Ü—É animals...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–µ category
      const checkColumn = await db.execute(sql`
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'animals' AND column_name = 'category'
      `);
      
      if (checkColumn.rows.length > 0) {
        console.log('‚úÖ –ü–æ–ª–µ category —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
      } else {
        console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ category...');
        await db.execute(sql`ALTER TABLE animals ADD COLUMN category TEXT DEFAULT 'livestock'`);
        console.log('‚úÖ –ü–æ–ª–µ category –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö...');
      const updateResult = await db.execute(sql`
        UPDATE animals 
        SET category = animal_types.category 
        FROM animal_types 
        WHERE animals.animal_type_id = animal_types.id
      `);
      
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${updateResult.rowCount || 0}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è:', error);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã animals...');
    const tableInfo = await db.execute(sql`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'animals' AND column_name = 'category'
    `);
    
    if (tableInfo.rows.length > 0) {
      const column = tableInfo.rows[0];
      console.log(`üìã –ü–æ–ª–µ category: ${column.data_type} ${column.is_nullable === 'NO' ? 'NOT NULL' : 'NULL'} ${column.column_default ? `DEFAULT ${column.column_default}` : ''}`);
    } else {
      console.log('‚ùå –ü–æ–ª–µ category –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    }
    
    await pool.end();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è category:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫
addCategoryFieldNeon(); 