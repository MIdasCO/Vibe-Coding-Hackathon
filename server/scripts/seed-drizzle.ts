import 'dotenv/config';
import { db } from '../db.js';
import { regions, cities, animalTypes, breeds } from '@shared/schema.js';

const regionsData = [
  { name: 'Bishkek', nameKy: '–ë–∏—à–∫–µ–∫', nameRu: '–ë–∏—à–∫–µ–∫' },
  { name: 'Osh', nameKy: '–û—à', nameRu: '–û—à' },
  { name: 'Chuy', nameKy: '–ß“Ø–π', nameRu: '–ß—É–π' },
  { name: 'Jalal-Abad', nameKy: '–ñ–∞–ª–∞–ª-–ê–±–∞–¥', nameRu: '–î–∂–∞–ª–∞–ª-–ê–±–∞–¥' },
  { name: 'Osh Region', nameKy: '–û—à –æ–±–ª—É—Å—É', nameRu: '–û—à—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' },
  { name: 'Batken', nameKy: '–ë–∞—Ç–∫–µ–Ω', nameRu: '–ë–∞—Ç–∫–µ–Ω' },
  { name: 'Talas', nameKy: '–¢–∞–ª–∞—Å', nameRu: '–¢–∞–ª–∞—Å' },
  { name: 'Naryn', nameKy: '–ù–∞—Ä—ã–Ω', nameRu: '–ù–∞—Ä—ã–Ω' },
  { name: 'Issyk-Kul', nameKy: '–´—Å—ã–∫-–ö”©–ª', nameRu: '–ò—Å—Å—ã–∫-–ö—É–ª—å' }
];

const citiesData = [
  // Bishkek
  { name: 'Bishkek', nameKy: '–ë–∏—à–∫–µ–∫', nameRu: '–ë–∏—à–∫–µ–∫', regionName: 'Bishkek' },
  
  // Osh
  { name: 'Osh', nameKy: '–û—à', nameRu: '–û—à', regionName: 'Osh' },
  
  // Chuy
  { name: 'Tokmok', nameKy: '–¢–æ–∫–º–æ–∫', nameRu: '–¢–æ–∫–º–∞–∫', regionName: 'Chuy' },
  { name: 'Kant', nameKy: '–ö–∞–Ω—Ç', nameRu: '–ö–∞–Ω—Ç', regionName: 'Chuy' },
  { name: 'Kemin', nameKy: '–ö–µ–º–∏–Ω', nameRu: '–ö–µ–º–∏–Ω', regionName: 'Chuy' },
  { name: 'Shopokov', nameKy: '–®–æ–ø–æ–∫–æ–≤', nameRu: '–®–æ–ø–æ–∫–æ–≤', regionName: 'Chuy' },
  
  // Jalal-Abad
  { name: 'Jalal-Abad', nameKy: '–ñ–∞–ª–∞–ª-–ê–±–∞–¥', nameRu: '–î–∂–∞–ª–∞–ª-–ê–±–∞–¥', regionName: 'Jalal-Abad' },
  { name: 'Kara-Kul', nameKy: '–ö–∞—Ä–∞-–ö”©–ª', nameRu: '–ö–∞—Ä–∞-–ö—É–ª—å', regionName: 'Jalal-Abad' },
  { name: 'Mailuu-Suu', nameKy: '–ú–∞–π–ª—É—É-–°—É—É', nameRu: '–ú–∞–π–ª—É—É-–°—É—É', regionName: 'Jalal-Abad' },
  { name: 'Tash-Kumyr', nameKy: '–¢–∞—à-–ö”©–º“Ø—Ä', nameRu: '–¢–∞—à-–ö—É–º—ã—Ä', regionName: 'Jalal-Abad' },
  
  // Osh Region
  { name: 'Uzgen', nameKy: '”®–∑–≥”©–Ω', nameRu: '–£–∑–≥–µ–Ω', regionName: 'Osh Region' },
  { name: 'Kara-Suu', nameKy: '–ö–∞—Ä–∞-–°—É—É', nameRu: '–ö–∞—Ä–∞-–°—É—É', regionName: 'Osh Region' },
  { name: 'Nookat', nameKy: '–ù–æ–æ–∫–∞—Ç', nameRu: '–ù–æ–æ–∫–∞—Ç', regionName: 'Osh Region' },
  { name: 'Aravan', nameKy: '–ê—Ä–∞–≤–∞–Ω', nameRu: '–ê—Ä–∞–≤–∞–Ω', regionName: 'Osh Region' },
  
  // Batken
  { name: 'Batken', nameKy: '–ë–∞—Ç–∫–µ–Ω', nameRu: '–ë–∞—Ç–∫–µ–Ω', regionName: 'Batken' },
  { name: 'Sulukta', nameKy: '–°—É–ª—É–∫—Ç–∞', nameRu: '–°—É–ª—é–∫—Ç–∞', regionName: 'Batken' },
  { name: 'Kyzyl-Kiya', nameKy: '–ö—ã–∑—ã–ª-–ö—ã—è', nameRu: '–ö—ã–∑—ã–ª-–ö–∏—è', regionName: 'Batken' },
  
  // Talas
  { name: 'Talas', nameKy: '–¢–∞–ª–∞—Å', nameRu: '–¢–∞–ª–∞—Å', regionName: 'Talas' },
  { name: 'Kara-Buura', nameKy: '–ö–∞—Ä–∞-–ë—É—É—Ä–∞', nameRu: '–ö–∞—Ä–∞-–ë—É—É—Ä–∞', regionName: 'Talas' },
  
  // Naryn
  { name: 'Naryn', nameKy: '–ù–∞—Ä—ã–Ω', nameRu: '–ù–∞—Ä—ã–Ω', regionName: 'Naryn' },
  { name: 'At-Bashy', nameKy: '–ê—Ç-–ë–∞—à—ã', nameRu: '–ê—Ç-–ë–∞—à–∏', regionName: 'Naryn' },
  
  // Issyk-Kul
  { name: 'Karakol', nameKy: '–ö–∞—Ä–∞–∫–æ–ª', nameRu: '–ö–∞—Ä–∞–∫–æ–ª', regionName: 'Issyk-Kul' },
  { name: 'Balykchy', nameKy: '–ë–∞–ª—ã–∫—á—ã', nameRu: '–ë–∞–ª—ã–∫—á–∏', regionName: 'Issyk-Kul' },
  { name: 'Cholpon-Ata', nameKy: '–ß–æ–ª–ø–æ–Ω-–ê—Ç–∞', nameRu: '–ß–æ–ª–ø–æ–Ω-–ê—Ç–∞', regionName: 'Issyk-Kul' }
];

const animalTypesData = [
  { name: 'Cattle', nameKy: '–£–π', nameRu: '–ö—Ä—É–ø–Ω—ã–π —Ä–æ–≥–∞—Ç—ã–π —Å–∫–æ—Ç', icon: 'üêÑ' },
  { name: 'Sheep', nameKy: '–ö–æ–π', nameRu: '–û–≤—Ü—ã', icon: 'üêë' },
  { name: 'Goats', nameKy: '–≠—á–∫–∏', nameRu: '–ö–æ–∑—ã', icon: 'üêê' },
  { name: 'Horses', nameKy: '–ñ—ã–ª–∫—ã', nameRu: '–õ–æ—à–∞–¥–∏', icon: 'üêé' },
  { name: 'Pigs', nameKy: '–ß–æ—á–∫–æ', nameRu: '–°–≤–∏–Ω—å–∏', icon: 'üê∑' },
  { name: 'Poultry', nameKy: '–ö–∞–Ω–∞—Ç—Ç—É—É–ª–∞—Ä', nameRu: '–ü—Ç–∏—Ü–∞', icon: 'üêî' },
  { name: 'Rabbits', nameKy: '–ö–æ—ë–Ω', nameRu: '–ö—Ä–æ–ª–∏–∫–∏', icon: 'üê∞' }
];

const breedsData = [
  // Cattle breeds
  { name: 'Holstein', nameKy: '–ì–æ–ª—à—Ç–∏–Ω', nameRu: '–ì–æ–ª—à—Ç–∏–Ω—Å–∫–∞—è', animalTypeName: 'Cattle' },
  { name: 'Jersey', nameKy: '–ñ–µ—Ä—Å–∏', nameRu: '–î–∂–µ—Ä—Å–µ–π—Å–∫–∞—è', animalTypeName: 'Cattle' },
  { name: 'Angus', nameKy: '–ê–Ω–≥—É—Å', nameRu: '–ê–Ω–≥—É—Å—Å–∫–∞—è', animalTypeName: 'Cattle' },
  { name: 'Simmental', nameKy: '–°–∏–º–º–µ–Ω—Ç–∞–ª', nameRu: '–°–∏–º–º–µ–Ω—Ç–∞–ª—å—Å–∫–∞—è', animalTypeName: 'Cattle' },
  
  // Sheep breeds
  { name: 'Merino', nameKy: '–ú–µ—Ä–∏–Ω–æ', nameRu: '–ú–µ—Ä–∏–Ω–æ—Å–æ–≤–∞—è', animalTypeName: 'Sheep' },
  { name: 'Karakul', nameKy: '–ö–∞—Ä–∞–∫”©–ª', nameRu: '–ö–∞—Ä–∞–∫—É–ª—å—Å–∫–∞—è', animalTypeName: 'Sheep' },
  { name: 'Romanov', nameKy: '–†–æ–º–∞–Ω–æ–≤', nameRu: '–†–æ–º–∞–Ω–æ–≤—Å–∫–∞—è', animalTypeName: 'Sheep' },
  
  // Goat breeds
  { name: 'Saanen', nameKy: '–ó–∞–∞–Ω–µ–Ω', nameRu: '–ó–∞–∞–Ω–µ–Ω—Å–∫–∞—è', animalTypeName: 'Goats' },
  { name: 'Nubian', nameKy: '–ù—É–±–∏—è', nameRu: '–ù—É–±–∏–π—Å–∫–∞—è', animalTypeName: 'Goats' },
  { name: 'Boer', nameKy: '–ë–æ–µ—Ä', nameRu: '–ë—É—Ä—Å–∫–∞—è', animalTypeName: 'Goats' },
  
  // Horse breeds
  { name: 'Kyrgyz', nameKy: '–ö—ã—Ä–≥—ã–∑ –∞—Ç', nameRu: '–ö–∏—Ä–≥–∏–∑—Å–∫–∞—è', animalTypeName: 'Horses' },
  { name: 'Arabian', nameKy: '–ê—Ä–∞–± –∞—Ç', nameRu: '–ê—Ä–∞–±—Å–∫–∞—è', animalTypeName: 'Horses' },
  { name: 'Thoroughbred', nameKy: '–ê—Å—ã–ª —Ç—É–∫—É–º', nameRu: '–ß–∏—Å—Ç–æ–∫—Ä–æ–≤–Ω–∞—è –≤–µ—Ä—Ö–æ–≤–∞—è', animalTypeName: 'Horses' }
];

async function seedDatabase() {
  try {
    console.log('Starting database seeding...');

    // Insert regions
    console.log('Seeding regions...');
    const insertedRegions = await db.insert(regions).values(regionsData).returning();
    console.log(`‚úì Inserted ${insertedRegions.length} regions`);

    // Create region name to ID mapping
    const regionMap = new Map<string, number>();
    insertedRegions.forEach((region: { name: string; id: number }) => {
      regionMap.set(region.name, region.id);
    });

    // Insert cities with region IDs
    console.log('Seeding cities...');
    const citiesWithRegionIds = citiesData.map(city => ({
      name: city.name,
      nameKy: city.nameKy,
      nameRu: city.nameRu,
      regionId: regionMap.get(city.regionName)!
    }));
    
    const insertedCities = await db.insert(cities).values(citiesWithRegionIds).returning();
    console.log(`‚úì Inserted ${insertedCities.length} cities`);

    // Insert animal types
    console.log('Seeding animal types...');
    const insertedAnimalTypes = await db.insert(animalTypes).values(animalTypesData).returning();
    console.log(`‚úì Inserted ${insertedAnimalTypes.length} animal types`);

    // Create animal type name to ID mapping
    const animalTypeMap = new Map<string, number>();
    insertedAnimalTypes.forEach((type: { name: string; id: number }) => {
      animalTypeMap.set(type.name, type.id);
    });

    // Insert breeds with animal type IDs
    console.log('Seeding breeds...');
    const breedsWithTypeIds = breedsData.map(breed => ({
      name: breed.name,
      nameKy: breed.nameKy,
      nameRu: breed.nameRu,
      animalTypeId: animalTypeMap.get(breed.animalTypeName)!
    }));
    
    const insertedBreeds = await db.insert(breeds).values(breedsWithTypeIds).returning();
    console.log(`‚úì Inserted ${insertedBreeds.length} breeds`);

    console.log('‚úÖ Database seeding completed successfully!');
  } catch (error) {
    console.error('‚ùå Error seeding database:', error);
    process.exit(1);
  }
}

seedDatabase(); 